<?php

// This function sets up the connection to the LSF database using the config file
// that is tracked outside of git.
function _lsf_subscription_set_database_connection() {
    $config_info = parse_ini_file(DRUPAL_ROOT . '/../lsf_config.ini', true);
    $username = $config_info['pgsql_connection']['username'];
    $password = $config_info['pgsql_connection']['password'];
    $host = $config_info['pgsql_connection']['host'];
    $port = $config_info['pgsql_connection']['port'];
    $driver = $config_info['pgsql_connection']['driver'];
    $database = $config_info['pgsql_connection']['database'];
    $lsf_database = array(
        'database' => $database,
        'username' => $username,
        'password' => $password,
        'host' => $host,
        'port' => $port,
        'driver' => $driver,
    );

    Database::addConnectionInfo($database, 'default', $lsf_database);
    db_set_active($database);
}

include_once 'subscription_ajax.inc';

/**
 * Implements hook menu
 */
function lsf_subscription_menu() {
    // adds ajax endpoint to poll the postgres database
    $items['subscription/ajax'] = array(
        'title' => 'SUBSCRIPTION REQUEST CALLBACK ENDPOINT',
        'type' => MENU_CALLBACK,
        'page callback' => '_lsf_subscription_ajax',
        'access callback' => TRUE,
    );

    return $items;
}


// Implements hook_node_validate
function lsf_subscription_node_validate($node, $form, &$form_state) {
    if ($node->type === 'subscription') {
        if ($node->field_area_geojson['und'][0]['geom']===''){
            form_set_error(
                t('No Area of Interest.'),
                t('There is no Area of interest defined. Please select a valid area of interest or shapefile and try again.  Thanks!')
            );
            return;
        }

        if (isset($node->field_area_type) && $node->field_area_type[LANGUAGE_NONE][0]['value'] === 'draw_area') {
            if ($node->field_custom_area[LANGUAGE_NONE][0]['geom'] === '') {
                form_set_error(
                    t('custom area missing value'),
                    t('Subscriptions of type "Draw Area" require a polygon to be drawn onto the "Custom Area" map.')
                );
                return;
            }
        } else if (isset($node->field_area_type) && $node->field_area_type[LANGUAGE_NONE][0]['value'] === 'select_county') {
            $state = strtolower($node->field_state[LANGUAGE_NONE][0]['value']);
            if ($state === '') {
                form_set_error(
                    t('select county missing data'),
                    t('Subscriptions of type "Select County" require both a state and county to be chosen.')
                );
                return;
            }
            $county = 'field_' . $state . '_counties';
            if (!isset($node->{$county}[LANGUAGE_NONE][0]) || !isset($node->{$county}[LANGUAGE_NONE][0]['value']) || $node->{$county}[LANGUAGE_NONE][0]['value'] === '') {
                form_set_error(
                    t('select county missing data'),
                    t('Subscriptions of type "Select County" require both a state and county to be chosen.')
                );
                return;
            }
        }
    }
}

// Implements hook_node_insert
//
// @param array node
function lsf_subscription_node_insert($node) {
    if ($node->type === 'subscription') {
        if (isset($node->field_area_type)) {
            $select_type = $node->field_area_type['und'][0]['value'];
            switch ($select_type) {
                case 'select_county':
                    insert_subscription_aoi_by_county($node);
                    break;
                case 'upload_shapefile':
                    insert_subscription_aoi_by_shape($node);
                    break;
                case 'draw_area':
                    insert_subscription_aoi_by_map($node);
                    break;
            }
        }
    }
}


// Implements hook_node_update
//
// @param object node
function lsf_subscription_node_update($node) {
    if ($node->type === 'subscription') {
        if (isset($node->field_area_type)) {
            $select_type = $node->field_area_type['und'][0]['value'];
            switch ($select_type) {
                case 'select_county':
                    _lsf_subscription_update_aoi_by_county($node);
                    break;
                case 'upload_shapefile':
                    _lsf_subscription_update_aoi_by_shape($node);
                    break;
                case 'draw_area':
                    _lsf_subscription_update_aoi_by_map($node);
                    break;
            }
        }
    }
}

// Implements hook_node_delete
//
// @param object node
function lsf_subscription_node_delete($node) {
    if ($node->type === 'subscription') {
        _lsf_subscription_set_database_connection();
        try {
            $result = db_query('SELECT * FROM delete_user_aoi_by_nid(:nid)',
                               array(
                                   ':nid' => $node->nid,
                               ));
        } catch (Exception $e) {
            drupal_set_message('Exception: ' . $e);
        }
        // Sets the db back to the default one
        db_set_active();
    }
}

// Inserts aoi for a users county based subscription.
//
// @param array $node New node object that is being created
function insert_subscription_aoi_by_county($node) {
    $state_counties = 'field_' . strtolower($node->field_state[LANGUAGE_NONE][0]['value']) . '_counties';
    $county_geoid = $node->{$state_counties}[LANGUAGE_NONE][0]['value'];

    _lsf_subscription_set_database_connection();

    // Inserts subscription into remote database with the function insert_user_aoi_by_county
    try {
        $result = db_query('SELECT * FROM insert_user_aoi_by_county(:nid, :uid, :title, :type, :geoid)',
                           array(
                               ':nid' => $node->nid,
                               ':uid' => $node->uid,
                               ':title' => $node->title,
                               ':type' => $node->type,
                               ':geoid' => $county_geoid
                           ));
    } catch (Exception $e) {
        drupal_set_message('Exception: ' . $e);
    }

    // Sets the db back to the default one
    db_set_active();
}

// Updates aoi for a users county based subscription.
//
// @param array $node New node object that is being created
function _lsf_subscription_update_aoi_by_county($node) {
    $state_counties = 'field_' . strtolower($node->field_state[LANGUAGE_NONE][0]['value']) . '_counties';
    $county_geoid = $node->{$state_counties}[LANGUAGE_NONE][0]['value'];

    _lsf_subscription_set_database_connection();

    // Inserts subscription into remote database with the function insert_user_aoi_by_county
    try {
        $result = db_query('SELECT * FROM update_user_aoi_by_county(:nid, :geoid)',
                           array(
                               ':nid' => $node->nid,
                               ':geoid' => $county_geoid
                           ));
    } catch (Exception $e) {
        drupal_set_message('Exception: ' . $e);
    }
    // Sets the db back to the default one
    db_set_active();
}

// Inserts aoi for a users shapefile based subscription.
//
// @param array $node New node object that is being created
function insert_subscription_aoi_by_shape($node) {
    geophp_load();
    $geom = geophp::load($node->field_area_geojson[LANGUAGE_NONE][0]['geom']);
    $geojson_writer = new GeoJSON();

    _lsf_subscription_set_database_connection();

    try {
        $result = db_query('SELECT * FROM insert_user_aoi_by_geojson(:nid, :uid, :title, :type, :geojson)',
                           array(
                               ':nid' => $node->nid,
                               ':uid' => $node->uid,
                               ':title' => $node->title,
                               ':type' => $node->type,
                               ':geojson' => $geojson_writer->write($geom)
                           ));
    } catch (Exception $e) {
        drupal_set_message('Exception: ' . $e);
    }

    // Sets the db back to the default one
    db_set_active();
}

// Updates aoi for a users shapefile based subscription.
//
// @param array $node New node object that is being created
function _lsf_subscription_update_aoi_by_shape($node) {
    geophp_load();
    $geom = geophp::load($node->field_area_geojson[LANGUAGE_NONE][0]['geom']);
    $geojson_writer = new GeoJSON();

    _lsf_subscription_set_database_connection();

    try {
        $result = db_query('SELECT * FROM update_user_aoi_by_geojson(:nid, :geojson)',
                           array(
                               ':nid' => $node->nid,
                               ':geojson' => $geojson_writer->write($geom)
                           ));
    } catch (Exception $e) {
        drupal_set_message('Exception: ' . $e);
    }

    // Sets the db back to the default one
    db_set_active();
}

// Inserts aoi for a users custom area based subscription.
//
// @param array $node New node object that is being created
function insert_subscription_aoi_by_map($node) {
    geophp_load();
    $geom = geophp::load($node->field_custom_area[LANGUAGE_NONE][0]['geom']);
    $geojson_writer = new GeoJSON();

    _lsf_subscription_set_database_connection();

    try {
        $result = db_query('SELECT * FROM insert_user_aoi_by_geojson(:nid, :uid, :title, :type, :geojson)',
                           array(
                               ':nid' => $node->nid,
                               ':uid' => $node->uid,
                               ':title' => $node->title,
                               ':type' => $node->type,
                               ':geojson' => $geojson_writer->write($geom)
                           ));
    } catch (Exception $e) {
        drupal_set_message('Exception: ' . $e);
    }

    // Sets the db back to the default one
    db_set_active();
}

// Updates aoi for a users custom area based subscription.
//
// @param array $node New node object that is being created
function _lsf_subscription_update_aoi_by_map($node) {
    geophp_load();
    $geom = geophp::load($node->field_custom_area[LANGUAGE_NONE][0]['geom']);
    $geojson_writer = new GeoJSON();

    _lsf_subscription_set_database_connection();

    try {
        $result = db_query('SELECT * FROM update_user_aoi_by_geojson(:nid, :geojson)',
                           array(
                               ':nid' => $node->nid,
                               ':geojson' => $geojson_writer->write($geom)
                           ));
    } catch (Exception $e) {
        drupal_set_message('Exception: ' . $e);
    }

    // Sets the db back to the default one
    db_set_active();
}

/**
 * Implements hook_form_alter
 */
function lsf_subscription_form_alter(&$form, &$form_state, $form_id) {
    if ($form_id === 'subscription_node_form') {
        $form['actions']['submit']['#value'] = 'Submit';

        $lsf_subscription_path = drupal_get_path('module', 'lsf_subscription');
        drupal_add_js($lsf_subscription_path . '/libs/geojsonhint.js' , array('type' => 'file', 'scope' => 'footer'));
        drupal_add_js($lsf_subscription_path . '/libs/jszip.min.js' , array('type' => 'file', 'scope' => 'footer'));
        drupal_add_js($lsf_subscription_path . '/libs/shp.min.js' , array('type' => 'file', 'scope' => 'footer'));
        if (array_key_exists('js', $form['#attached']) && is_array($form['#attached']['js'])) {
            $form['#attached']['js'][] = $lsf_subscription_path . '/subscription_handlers.js';
            $form['#attached']['js'][] = $lsf_subscription_path . '/libs/wellknown.js';
       } else {
            $form['#attached']['js'] = array(
                $lsf_subscription_path . '/subscription_handlers.js',
                $lsf_subscription_path . '/libs/wellknown.js',
            );
        }
    }
}





/**
 * Implements hook_node_view
 */
function lsf_subscription_node_view($node, $view_mode, $langcode) {
    if ($node->type === 'subscription') {
        $path = drupal_get_path('module','lsf_subscription') . '/notification_table.js';
        $node->content['#attached']['js'][] = $path;
    }
}
