<?php
// Global DB connection variables:
$shapeGeoJSON = '';

// This function sets up the connection to the LSF database using the config file
// that is tracked outside of git.
function _lsf_subscription_set_database_connection() {
    $config_info = parse_ini_file(DRUPAL_ROOT . '/../lsf_config.ini', true);
    $username = $config_info['pgsql_connection']['username'];
    $password = $config_info['pgsql_connection']['password'];
    $host = $config_info['pgsql_connection']['host'];
    $port = $config_info['pgsql_connection']['port'];
    $driver = $config_info['pgsql_connection']['driver'];
    $database = $config_info['pgsql_connection']['database'];
    $lsf_database = array(
        'database' => $database,
        'username' => $username,
        'password' => $password,
        'host' => $host,
        'port' => $port,
        'driver' => $driver,
    );

    Database::addConnectionInfo($database, 'default', $lsf_database);
    db_set_active($database);	
}

// Implements hook_node_validate
//
// jrf (6-6-15): I don't know why this is here
// jdm (7/12/15): I was in the middle of testing something out with validation
//                  which is to stop the submission to display back to the user a 
//                  list of possible scenes in which to choose from.  However, I am 
//                  fine w/ you taking over this portion of the code if you are ready.
//                Another possible way to do this is with AJAX... But I was thinking 
//                this method should work.  
//                Also you will see that I added a radio button field at the top of this
//                content type.  The idea was going to be to hide this radio button list 
//                until the return back from PGSQL. I am going to hold off on coding 
//                anything further till we chat next week.
function lsf_subscription_node_validate($node, $form, &$form_state) {
    //        file_put_contents(drupal_get_path('module', 'lsf_subscription') . '/node.log', print_r($node,TRUE));
    //        file_put_contents(drupal_get_path('module', 'lsf_subscription') . '/form.log', print_r($form,TRUE));
    //        file_put_contents(drupal_get_path('module', 'lsf_subscription') . '/formstate.log', print_r($form_state,TRUE));

    // This will check to see if the uploaded zip contains the correct files. If it does
    // then it will attempt to convert the shapefile to geojson and it if it does then
    // it will populate field_geojson with the generated geom.
    if ($node->type === 'subscription') {
        if (isset($node->field_area_type) && $node->field_area_type[LANGUAGE_NONE][0]['value'] === 'upload_shapefile') {
            if (!isset($node->field_area_shapefile[LANGUAGE_NONE][0]['fid']) || $node->field_area_shapefile[LANGUAGE_NONE][0]['fid'] === 0) {
                form_set_error(t('Invalid Zip in area shapefile'), t('The "Area Shapefile" field is required for subscriptions of type "Upload Shapefile." Please upload a valid zip file containing .shp, .shx and .dbf files.'));
            }

            $shapefile = file_load($node->field_area_shapefile[LANGUAGE_NONE][0]['fid']);
            $shapefile_path = 'sites/default/files/' . file_uri_target($shapefile->uri);
            $lsf_path = drupal_get_path('module', 'lsf_subscription');

            $check_zip_command = '/usr/bin/python ' . $lsf_path . '/cgi-bin/checkZip.py ' . $shapefile_path;
            $check_zip = shell_exec($check_zip_command);
            if (trim($check_zip) !== 'Zip is complete') {
                form_set_error(t('Invalid Zip in area shapefile'), t('The "Area Shapefile" field is required for subscriptions of type "Upload Shapefile." Please upload a valid zip file containing .shp, .shx and .dbf files.'));
            }

            $target_directory = (string) $shapefile->fid . '_' . str_replace('.zip', '', $shapefile->filename);
            $target_directory = str_replace(' ', '', $target_directory);
            drupal_mkdir('public://shapefiles/' . $target_directory);

            $extracted_shapefile = shell_exec('/usr/bin/python ' . $lsf_path . '/cgi-bin/extractZip.py ' . $shapefile_path . ' sites/default/files/shapefiles/' . $target_directory);
            $extracted_shapefile = 'sites/default/files/shapefiles/' . $target_directory . '/' . $extracted_shapefile;

            $check_projection_command = '/usr/bin/python ' . $lsf_path . '/cgi-bin/checkSpatialRef.py ' . $extracted_shapefile;
            $check_projection = shell_exec($check_projection_command);
            if (trim($check_projection) === 'PYTHON ERROR') {
                shell_exec('/usr/bin/python ' . $lsf_path . '/cgi-bin/removeExtractedZip.py ' . 'sites/default/files/shapefiles/' . $target_directory);
                form_set_error(t('Invalid shapefile in area shapefile'), t('There is an error in your shapefile. Please verify your data and try again.'));
            } else if (trim($check_projection) === 'FALSE') {
                shell_exec('/usr/bin/python ' . $lsf_path . '/cgi-bin/reprojectShp.py ' . $extracted_shapefile);
            }

            $check_vertices_command = '/usr/bin/python ' . $lsf_path . '/cgi-bin/checkVerticies.py ' . $extracted_shapefile;
            $check_vertices = shell_exec($check_vertices_command);
            if (trim($check_vertices) === 'PYTHON ERROR') {
                shell_exec('/usr/bin/python ' . $lsf_path . '/cgi-bin/removeExtractedZip.py ' . 'sites/default/files/shapefiles/' . $target_directory);
                form_set_error(t('Invalid shapefile in area shapefile'), t('There is an error in your shapefile. Please verify your data and try again.'));
            } else if ((int) $check_vertices > 10000) {
                shell_exec('/usr/bin/python ' . $lsf_path . '/cgi-bin/simplifyShp.py ' . $extracted_shapefile);
            }

            $command = '/usr/bin/python ' . $lsf_path . '/cgi-bin/shpToGeoJSON.py ' . $extracted_shapefile;
            $geojson2 = shell_exec($command);

            form_set_value($form['field_area_geojson'], array(LANGUAGE_NONE => array(0 => array('geom' => $geojson2))), $form_state);
            shell_exec('/usr/bin/python ' . $lsf_path . '/cgi-bin/removeExtractedZip.py ' . 'sites/default/files/shapefiles/' . $target_directory);
        } else if (isset($node->field_area_type) && $node->field_area_type[LANGUAGE_NONE][0]['value'] === 'draw_area') {
            if ($node->field_custom_area[LANGUAGE_NONE][0]['geom'] === '') {
                form_set_error(t('custom area missing value'), t('Subscriptions of type "Draw Area" require a polygon to be drawn onto the "Custom Area" map.'));
            }
        }
    }
    //    $form['custom_request_node_form'] = array(
    //        '#title'    => t('Phone'),
    //        '#type'     => 'textfield',
    //        '#required' => TRUE,
    //    );
//    form_set_error('time', t('An event may not end before it starts.'));
}

// function lsf_subscription_form_custom_request_node_form_alter(&$form, $form_state, $form_id)
// {
    // drupal_set_message('The form is being submitted, do some extra stuff now...');  
    // if($form_id == 'custom_request_node_form')
    // {
        // $form['#submit'][] = "lsf_subscription_form_submit_handler";
    // }
// }

// function lsf_subscription_form_submit_handler($form, &$form_state)
// {
    // drupal_set_message('The form is being submitted, do some extra stuff now...');
// }



// Implements hook_node_insert
//
// @param array node
function lsf_subscription_node_insert($node) {
    if ($node->type === 'subscription') {
        if (isset($node->field_area_type)) {
            $select_type = $node->field_area_type['und'][0]['value'];
            switch ($select_type) {
                case 'select_county':
                    insert_subscription_aoi_by_county($node);
                    break;
                case 'upload_shapefile':
                    insert_subscription_aoi_by_shape($node);
                    break;
                case 'draw_area':
                    insert_subscription_aoi_by_map($node);
                    break;
            }
        }
    }
}


// Implements hook_node_submit
//
// Function to insert new user AOI when created
function lsf_subscription_node_submit($node, $form, &$form_state) {
    // This hook is invoked when a node form is submitted with either the "Save" or "Preview" button,
    // after form values have been copied to the form state's node object, but before the node is saved or previewed.
    if ($node->type === 'subscription') {
        $select_type = '';
        if (isset($node->field_area_type)) {
            $select_type = $node->field_area_type['und'][0]['value'];
            switch ($select_type) {
                case 'select_county':
                    //                    insert_subscription_aoi_by_county($node, $form_state);
                    break;
                case 'upload_shapefile':
                    //                    insert_subscription_aoi_by_shape($node, $form, $form_state);
                    break;
                case 'draw_area':
                    //                    insert_subscription_aoi_by_map($node, $form_state);
                    break;
            }
        }
    }
}

// Inserts aoi for a users county based subscription.
//
// @param array $node New node object that is being created
function insert_subscription_aoi_by_county($node) {
    $county_geoid = '';
    // We do not know which field_*_counties was set, so this will loop over all fields and find which one has a value
    foreach ($node as $key => $value) {
        if (strpos($key, 'counties') !== FALSE) {
            $county_geoid = $value['und'][0]['value'];
            break;
        }
    }	

    _lsf_subscription_set_database_connection();

    // User has selected State and County so go ahead and just 
    // insert that thing into the user_aoi table.  Do this by calling a PGSQL 
    // function, insert_user_aoi_by_county.sql, that receives the necessary parameter to make use of the existing 
    // geometry within the counties table
    try {
        $result = db_query('SELECT * FROM insert_user_aoi_by_county(:nid, :uid, :title, :type, :geoid)',
                           array(
                               ':nid' => $node->nid,
                               ':uid' => $node->uid,
                               ':title' => $node->title,
                               ':type' => $node->type,
                               ':geoid' => $county_geoid
                           ));
    } catch (Exception $e) {
        drupal_set_message('Exception: ' . $e);
    }    

    // Be sure to set the db back to the default one
    db_set_active();
}

// Inserts aoi for a users shapefile based subscription.
//
// @param array $node New node object that is being created
function insert_subscription_aoi_by_shape($node) {
    geophp_load();
    $geom = geophp::load($node->field_area_geojson[LANGUAGE_NONE][0]['geom']);
    $geojson_writer = new GeoJSON();

    _lsf_subscription_set_database_connection();
    
    try {
        $result = db_query('SELECT * FROM insert_user_aoi_by_geojson2(:nid, :uid, :title, :type, :geojson)',
                           array(
                               ':nid' => $node->nid,
                               ':uid' => $node->uid,
                               ':title' => $node->title,
                               ':type' => $node->type,
                               ':geojson' => $geojson_writer->write($geom)
                           ));
    } catch (Exception $e) {
        drupal_set_message('Exception: ' . $e);
    }      

    // Be sure to set the db back to the default one
    db_set_active();
}	

// Inserts aoi for a users custom area based subscription.
//
// @param array $node New node object that is being created
function insert_subscription_aoi_by_map($node) {
    geophp_load();
    $geom = geophp::load($node->field_custom_area[LANGUAGE_NONE][0]['geom']);
    $geojson_writer = new GeoJSON();
    
    _lsf_subscription_set_database_connection();
    
    try {
        $result = db_query('SELECT * FROM insert_user_aoi_by_geojson2(:nid, :uid, :title, :type, :geojson)',
                           array(
                               ':nid' => $node->nid,
                               ':uid' => $node->uid,
                               ':title' => $node->title,
                               ':type' => $node->type,
                               ':geojson' => $geojson_writer->write($geom)
                           ));
    } catch (Exception $e) {
        drupal_set_message('Exception: ' . $e);
    }      

    // Be sure to set the db back to the default one
    db_set_active();
}	

function lsf_subscription_file_insert($file) {
    global $shapeGeoJSON;
    // drupal_set_message('lsf_subscription_file_insert');
    // dsm($file);
    $zipFileName = $file->uri;
    $tmpExplode = explode('/', $zipFileName);
    $zipFileName = end($tmpExplode);
    // drupal_set_message($zipFileName);
    // Populate field_area_geojson
    $command =  '/usr/bin/python ' .  drupal_get_path('module', 'lsf_subscription') . '/cgi-bin/shp2json.cgi sites/default/files/shapefiles/'.$zipFileName;
    // drupal_set_message($command);
    // dsm($command);
    $shapeGeoJSON = shell_exec($command);
    // drupal_set_message($shapeGeoJSON);
    // dsm($shapeGeoJSON);
    drupal_add_js(array('lsf_subscription' => array('geojson' => $shapeGeoJSON)), 'setting');
    drupal_add_js(drupal_get_path('module', 'lsf_subscription') .'/populate_geojson.js');
}
