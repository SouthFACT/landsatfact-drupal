<?php
// Global DB connection variables:
$lsf_database = array();
$database = '';
$shapeGeoJSON = '';

//This function is run when any page is initialized
function lsf_subscription_init() {
	global $database, $lsf_database;
	$config_info = parse_ini_file("lsf_config.ini",true);
	$username = $config_info["pgsql_connection"]["username"];
	$password = $config_info["pgsql_connection"]["password"];
	$host = $config_info["pgsql_connection"]["host"];
	$port = $config_info["pgsql_connection"]["port"];
	$driver = $config_info["pgsql_connection"]["driver"];
	$database = $config_info["pgsql_connection"]["database"];
	$lsf_database = array(
	  'database' => $database,
	  'username' => $username,  
	  'password' => $password,  
	  'host' => $host,  
	  'port' => $port,
	  'driver' => $driver,  
	);
}

function lsf_subscription_file_insert($file) {
	global $shapeGeoJSON;
	// dsm($file);
	$zipFileName = $file->uri;
	$tmpExplode = explode('/', $zipFileName);
	$zipFileName = end($tmpExplode);	
	// drupal_set_message($zipFileName);
	// Populate field_area_geojson
	$command =  "/usr/bin/python " .  drupal_get_path("module", "lsf_subscription") . "/cgi-bin/shp2json.cgi sites/default/files/shapefiles/".$zipFileName;
	// dsm($command);
	$shapeGeoJSON = shell_exec($command);
	// dsm($shapeGeoJSON);
	drupal_add_js(array('lsf_subscription' => array('geojson' => $shapeGeoJSON)), 'setting');
	drupal_add_js(drupal_get_path('module', 'lsf_subscription') .'/populate_geojson.js');
}


//Function to insert new user AOI when created
function lsf_subscription_node_submit($node, $form, &$form_state) {
	// This hook is invoked when a node form is submitted with either the "Save" or "Preview" button, 
	// after form values have been copied to the form state's node object, but before the node is 
	// saved or previewed.   
    // dsm($node);    
	if ($node->type === 'subscription' || $node->type === 'custom_request') {
		$select_type = '';
	    if (isset($node->field_area_type)) {
			$select_type = $node->field_area_type['und'][0]['value'];
			// drupal_set_message($select_type);
	        switch ($select_type) {
				case "select_county":
					insert_new_aoi_by_county($node, $form_state);
					break;
				case "upload_shapefile":
					insert_new_aoi_by_shape($node, $form, $form_state);
					break;
				case "draw_area":
					insert_new_aoi_by_map($node, $form_state);
					break;
	        }	
	    }
	}
}

function insert_new_aoi_by_shape($node, $form, &$form_state) {
	global $database, $lsf_database, $shapeGeoJSON;
	// dsm(file_load($node->field_area_shapefile['und']['0']['fid']));
	$zipFileName = file_load($node->field_area_shapefile['und']['0']['fid'])->filename;
	// drupal_set_message("shpPath: " . $zipFileName);
	$command =  "/usr/bin/python " .  drupal_get_path("module", "lsf_subscription") . "/cgi-bin/shp2wkt.cgi sites/default/files/shapefiles/".$zipFileName;
	// dsm($command);
	$shapeFileResults = shell_exec($command);	
	$shapeFileResultsArray = explode(':', $shapeFileResults);
	// dsm($shapeFileResultsArray);
	$shapeFileName = $shapeFileResultsArray[0];
	// drupal_set_message("shapeFileName: " . $shapeFileName);
	$bboxArray = explode(',', $shapeFileResultsArray[1]);
	// dsm($bboxArray);	
	// POLYGON((-85.84400746799991566 33.94141657500006204,
	// -85.84400746799991566 34.52625645100005158,
	// -85.39883260999994263 34.52625645100005158,
	// -85.39883260999994263 33.94141657500006204,
	// -85.84400746799991566 33.94141657500006204))
	$wkt = "POLYGON((".$bboxArray[0]." ".$bboxArray[2].",".$bboxArray[0]." ".$bboxArray[3].",".$bboxArray[1]." ".$bboxArray[3].",".$bboxArray[1]." ".$bboxArray[2].",".$bboxArray[0]." ".$bboxArray[2]."))";
	drupal_set_message($wkt);
	
	// drupal_set_message($shapeGeoJSON);
	// Switch to the lsf db
	// dsm($lsf_database);
	// Database::addConnectionInfo($database, 'default', $lsf_database);
	// db_set_active($database);	
	
	// Get list of quad_ids by county $shapeWKT
	// by intersecting with landsat_quads
	// try {
		// $result = db_query('SELECT ST_AsText(ST_Envelope(geom)) AS bbox 
		// FROM counties WHERE geoid = :geoid', array(':geoid' => $county_geoid));			
	// }
	// catch (Exception $e) {
		// drupal_set_message("Exception: " . $e);
	// }	

	// Be sure to set the db back to the default one
	// db_set_active();	
	
}	


function insert_new_aoi_by_county($node, $form_state) {
   	global $database, $lsf_database;
	$fields = array();
	$county_geoid = '';
    foreach($form_state['values'] as $key=>$value){
        $fields[$key] = $value;
		if (strpos($key,'counties') !== false) {
			$county_geoid = $fields[$key]['und'][0]['value'];
		}
    }	
	// Switch to the lsf db
	Database::addConnectionInfo($database, 'default', $lsf_database);
	db_set_active($database);	
	
	// Get list of quad_ids by county geoid
	$quad_ids = array();
	try {
		$result = db_select('quad_counties', 'qc')
			->fields('qc', array('quad_id'))
			->condition('geoid', $county_geoid,'=')
			->execute();	
	}
	catch (Exception $e) {
		drupal_set_message("Exception: " . $e);
	}
	foreach ($result as $record) {
	  $quad_ids[] = $record;
	}		
	// dsm($quad_ids);

	//Get county bbox
	//e.g. select ST_AsText(ST_Envelope(geom)) As bbox from counties where geoid=12035;
	$county_bbox = array();
	try {
		$result = db_query('SELECT ST_AsText(ST_Envelope(geom)) AS bbox 
		FROM counties WHERE geoid = :geoid', array(':geoid' => $county_geoid));			
	}
	catch (Exception $e) {
		drupal_set_message("Exception: " . $e);
	}	
	foreach ($result as $record) {
	  $county_bbox[] = $record;
	}
	
	// For each quad_id insert into user_aoi:
	foreach ($quad_ids as $key => $value) {
		// drupal_set_message($value->quad_id);
		try {
			db_insert('user_aoi')->
				fields(array(
					'user_id' => $node->name,
					'quad_id' => $value->quad_id,
					'aoi_name' => $node->title,
					'aoi_type' => $node->type,
					'bbox' => $county_bbox[0]->bbox,		
			))->execute();
		}
		catch (Exception $e) {
			drupal_set_message("Exception: " . $e);
		}
	}
	
	// Be sure to set the db back to the default one
	db_set_active();
}	

function insert_new_aoi_by_map($node, $form_state) {
	
}	