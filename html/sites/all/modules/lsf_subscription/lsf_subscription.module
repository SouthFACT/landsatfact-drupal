<?php

// This function sets up the connection to the LSF database using the config file
// that is tracked outside of git.
function _lsf_subscription_set_database_connection() {
    $config_info = parse_ini_file(DRUPAL_ROOT . '/../lsf_config.ini', true);
    $username = $config_info['pgsql_connection']['username'];
    $password = $config_info['pgsql_connection']['password'];
    $host = $config_info['pgsql_connection']['host'];
    $port = $config_info['pgsql_connection']['port'];
    $driver = $config_info['pgsql_connection']['driver'];
    $database = $config_info['pgsql_connection']['database'];
    $lsf_database = array(
        'database' => $database,
        'username' => $username,
        'password' => $password,
        'host' => $host,
        'port' => $port,
        'driver' => $driver,
    );

    Database::addConnectionInfo($database, 'default', $lsf_database);
    db_set_active($database);	
}

// Implements hook_node_validate
function lsf_subscription_node_validate($node, $form, &$form_state) {
    //    file_put_contents(drupal_get_path('module', 'lsf_subscription') . '/node.log', print_r($node,TRUE));
    //        file_put_contents(drupal_get_path('module', 'lsf_subscription') . '/form.log', print_r($form,TRUE));
    //        file_put_contents(drupal_get_path('module', 'lsf_subscription') . '/formstate.log', print_r($form_state,TRUE));

    if ($node->type === 'subscription') {
        // Runs validation on uploaded zip, converts it to geojson and sets field_geojson
        if (isset($node->field_area_type) && $node->field_area_type[LANGUAGE_NONE][0]['value'] === 'upload_shapefile') {
            if (!isset($node->field_area_shapefile[LANGUAGE_NONE][0]['fid']) || $node->field_area_shapefile[LANGUAGE_NONE][0]['fid'] === 0) {
                form_set_error(
                    t('Invalid Zip in area shapefile'),
                    t('The "Area Shapefile" field is required for subscriptions of type "Upload Shapefile." Please upload a valid zip file containing .shp, .shx, .prj and .dbf files.')
                );
                return;
            }

            $zip = file_load($node->field_area_shapefile[LANGUAGE_NONE][0]['fid']);
            $zip_path = 'sites/default/files/' . file_uri_target($zip->uri);
            $python_path = '/usr/bin/python ' . drupal_get_path('module', 'lsf_subscription') . '/cgi-bin/';

            // verifies the uploaded zip contains .shp, .shx, .dbf & .prj files
            $check_zip = shell_exec($python_path . 'checkZip.py ' . $zip_path);
            if (trim($check_zip) !== 'Zip is complete') {
                form_set_error(
                    t('Invalid Zip in area shapefile'),
                    t('The "Area Shapefile" field is required for subscriptions of type "Upload Shapefile." Please upload a valid zip file containing .shp, .shx, .prj and .dbf files.')
                );
                return;
            }

            $target_directory = (string) $zip->fid . '_' . str_replace('.zip', '', $zip->filename);
            $target_directory = str_replace(' ', '', $target_directory);
            drupal_mkdir('public://shapefiles/' . $target_directory);

            // cache this command since it is always the same
            $remove_extracted_command = $python_path . 'removeExtractedZip.py ' . 'sites/default/files/shapefiles/' . $target_directory;

            $shapefile = shell_exec($python_path . 'extractZip.py ' . $zip_path . ' sites/default/files/shapefiles/' . $target_directory);
            $shapefile = 'sites/default/files/shapefiles/' . $target_directory . '/' . $shapefile;

            // converts the shapefile to ESPG:4326 as required by drupal if it is not
            $check_projection = shell_exec($python_path . 'checkSpatialRef.py ' . $shapefile);
            if (trim($check_projection) === 'PYTHON ERROR') {
                shell_exec($remove_extracted_command);
                form_set_error(
                    t('Invalid shapefile in area shapefile'),
                    t('There is an error in your shapefile. Please verify your data and try again.')
                );
                return;
            } else if (trim($check_projection) === 'FALSE') {
                shell_exec($python_path . 'reprojectShp.py ' . $shapefile);
            }

            // reduces the verticies to < 10000 to reduce the complexity of the server intersections
            $check_vertices = shell_exec($python_path . 'checkVerticies.py ' . $shapefile);
            if (trim($check_vertices) === 'PYTHON ERROR') {
                shell_exec($remove_extracted_command);
                form_set_error(
                    t('Invalid shapefile in area shapefile'),
                    t('There is an error in your shapefile. Please verify your data and try again.')
                );
                return;
            } else if ((int) $check_vertices > 10000) {
                shell_exec($python_path . 'simplifyShp.py ' . $shapefile);
            }

            $geojson = shell_exec($python_path . 'shpToGeoJSON.py ' . $shapefile);

            form_set_value($form['field_area_geojson'], array(LANGUAGE_NONE => array(0 => array('geom' => $geojson))), $form_state);
            shell_exec($remove_extracted_command);
        } else if (isset($node->field_area_type) && $node->field_area_type[LANGUAGE_NONE][0]['value'] === 'draw_area') {
            if ($node->field_custom_area[LANGUAGE_NONE][0]['geom'] === '') {
                form_set_error(
                    t('custom area missing value'),
                    t('Subscriptions of type "Draw Area" require a polygon to be drawn onto the "Custom Area" map.')
                );
                return;
            }
        } else if (isset($node->field_area_type) && $node->field_area_type[LANGUAGE_NONE][0]['value'] === 'select_county') {
            $state = strtolower($node->field_state[LANGUAGE_NONE][0]['value']);
            if ($state === '') {
                form_set_error(
                    t('select county missing data'),
                    t('Subscriptions of type "Select County" require both a state and county to be chosen.')
                );
                return;
            }
            $county = 'field_' . $state . '_counties';
            if (!isset($node->{$county}[LANGUAGE_NONE][0]) || !isset($node->{$county}[LANGUAGE_NONE][0]['value']) || $node->{$county}[LANGUAGE_NONE][0]['value'] === '') {
                form_set_error(
                    t('select county missing data'),
                    t('Subscriptions of type "Select County" require both a state and county to be chosen.')
                );
                return;
            }
        }
    }
}

// Implements hook_node_insert
//
// @param array node
function lsf_subscription_node_insert($node) {
    if ($node->type === 'subscription') {
        if (isset($node->field_area_type)) {
            $select_type = $node->field_area_type['und'][0]['value'];
            switch ($select_type) {
                case 'select_county':
                    insert_subscription_aoi_by_county($node);
                    break;
                case 'upload_shapefile':
                    insert_subscription_aoi_by_shape($node);
                    break;
                case 'draw_area':
                    insert_subscription_aoi_by_map($node);
                    break;
            }
        }
    }
}


// Implements hook_node_update
//
// @param object node
function lsf_subscription_node_update($node) {
    if ($node->type === 'subscription') {
        if (isset($node->field_area_type)) {
            $select_type = $node->field_area_type['und'][0]['value'];
            switch ($select_type) {
                case 'select_county':
                    _lsf_subscription_update_aoi_by_county($node);
                    break;
                case 'upload_shapefile':
                    _lsf_subscription_update_aoi_by_shape($node);
                    break;
                case 'draw_area':
                    _lsf_subscription_update_aoi_by_map($node);
                    break;
            }
        }
    }
}

// Implements hook_node_delete
//
// @param object node
function lsf_subscription_node_delete($node) {
    if ($node->type === 'subscription') {
        _lsf_subscription_set_database_connection();
        try {
            $result = db_query('SELECT * FROM delete_user_aoi_by_nid(:nid)',
                               array(
                                   ':nid' => $node->nid,
                               ));
        } catch (Exception $e) {
            drupal_set_message('Exception: ' . $e);
        }    
        // Sets the db back to the default one
        db_set_active();
    }
}

// Inserts aoi for a users county based subscription.
//
// @param array $node New node object that is being created
function insert_subscription_aoi_by_county($node) {
    $state_counties = 'field_' . strtolower($node->field_state[LANGUAGE_NONE][0]['value']) . '_counties';
    $county_geoid = $node->{$state_counties}[LANGUAGE_NONE][0]['value'];

    _lsf_subscription_set_database_connection();

    // Inserts subscription into remote database with the function insert_user_aoi_by_county
    try {
        $result = db_query('SELECT * FROM insert_user_aoi_by_county(:nid, :uid, :title, :type, :geoid)',
                           array(
                               ':nid' => $node->nid,
                               ':uid' => $node->uid,
                               ':title' => $node->title,
                               ':type' => $node->type,
                               ':geoid' => $county_geoid
                           ));
    } catch (Exception $e) {
        drupal_set_message('Exception: ' . $e);
    }    

    // Sets the db back to the default one
    db_set_active();
}

// Updates aoi for a users county based subscription.
//
// @param array $node New node object that is being created
function _lsf_subscription_update_aoi_by_county($node) {
    $state_counties = 'field_' . strtolower($node->field_state[LANGUAGE_NONE][0]['value']) . '_counties';
    $county_geoid = $node->{$state_counties}[LANGUAGE_NONE][0]['value'];

    _lsf_subscription_set_database_connection();

    // Inserts subscription into remote database with the function insert_user_aoi_by_county
    try {
        $result = db_query('SELECT * FROM update_user_aoi_by_county(:nid, :geoid)',
                           array(
                               ':nid' => $node->nid,
                               ':geoid' => $county_geoid
                           ));
    } catch (Exception $e) {
        drupal_set_message('Exception: ' . $e);
    }    
    // Sets the db back to the default one
    db_set_active();
}

// Inserts aoi for a users shapefile based subscription.
//
// @param array $node New node object that is being created
function insert_subscription_aoi_by_shape($node) {
    geophp_load();
    $geom = geophp::load($node->field_area_geojson[LANGUAGE_NONE][0]['geom']);
    $geojson_writer = new GeoJSON();

    _lsf_subscription_set_database_connection();
    
    try {
        $result = db_query('SELECT * FROM insert_user_aoi_by_geojson2(:nid, :uid, :title, :type, :geojson)',
                           array(
                               ':nid' => $node->nid,
                               ':uid' => $node->uid,
                               ':title' => $node->title,
                               ':type' => $node->type,
                               ':geojson' => $geojson_writer->write($geom)
                           ));
    } catch (Exception $e) {
        drupal_set_message('Exception: ' . $e);
    }      

    // Sets the db back to the default one
    db_set_active();
}

// Updates aoi for a users shapefile based subscription.
//
// @param array $node New node object that is being created
function _lsf_subscription_update_aoi_by_shape($node) {
    geophp_load();
    $geom = geophp::load($node->field_area_geojson[LANGUAGE_NONE][0]['geom']);
    $geojson_writer = new GeoJSON();

    _lsf_subscription_set_database_connection();
    
    try {
        $result = db_query('SELECT * FROM update_user_aoi_by_geojson(:nid, :geojson)',
                           array(
                               ':nid' => $node->nid,
                               ':geojson' => $geojson_writer->write($geom)
                           ));
    } catch (Exception $e) {
        drupal_set_message('Exception: ' . $e);
    }      

    // Sets the db back to the default one
    db_set_active();
}

// Inserts aoi for a users custom area based subscription.
//
// @param array $node New node object that is being created
function insert_subscription_aoi_by_map($node) {
    geophp_load();
    $geom = geophp::load($node->field_custom_area[LANGUAGE_NONE][0]['geom']);
    $geojson_writer = new GeoJSON();
    
    _lsf_subscription_set_database_connection();
    
    try {
        $result = db_query('SELECT * FROM insert_user_aoi_by_geojson2(:nid, :uid, :title, :type, :geojson)',
                           array(
                               ':nid' => $node->nid,
                               ':uid' => $node->uid,
                               ':title' => $node->title,
                               ':type' => $node->type,
                               ':geojson' => $geojson_writer->write($geom)
                           ));
    } catch (Exception $e) {
        drupal_set_message('Exception: ' . $e);
    }      

    // Sets the db back to the default one
    db_set_active();
}	

// Updates aoi for a users custom area based subscription.
//
// @param array $node New node object that is being created
function _lsf_subscription_update_aoi_by_map($node) {
    geophp_load();
    $geom = geophp::load($node->field_custom_area[LANGUAGE_NONE][0]['geom']);
    $geojson_writer = new GeoJSON();
    
    _lsf_subscription_set_database_connection();
    
    try {
        $result = db_query('SELECT * FROM update_user_aoi_by_geojson(:nid, :geojson)',
                           array(
                               ':nid' => $node->nid,
                               ':geojson' => $geojson_writer->write($geom)
                           ));
    } catch (Exception $e) {
        drupal_set_message('Exception: ' . $e);
    }      

    // Sets the db back to the default one
    db_set_active();
}	
