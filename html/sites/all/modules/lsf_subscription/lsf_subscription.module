<?php
// Global DB connection variables:
$lsf_database = array();
$database = '';
$shapeGeoJSON = '';

// This function sets up the connection to the LSF database using the config file
// that is tracked outside of git.
//
// This function is run when any page is initialized
function lsf_subscription_init() {
    global $database, $lsf_database;
    $config_info = parse_ini_file(DRUPAL_ROOT . '/../lsf_config.ini', true);
    $username = $config_info['pgsql_connection']['username'];
    $password = $config_info['pgsql_connection']['password'];
    $host = $config_info['pgsql_connection']['host'];
    $port = $config_info['pgsql_connection']['port'];
    $driver = $config_info['pgsql_connection']['driver'];
    $database = $config_info['pgsql_connection']['database'];
    $lsf_database = array(
        'database' => $database,
        'username' => $username,
        'password' => $password,
        'host' => $host,
        'port' => $port,
        'driver' => $driver,
    );
}

// Implements hook_node_validate
//
// jrf (6-6-15): I don't know why this is here
function lsf_subscription_node_validate($node, $form, &$form_state) {
    dsm($form);
    $form['custom_request_node_form'] = array(
        '#title'    => t('Phone'),
        '#type'     => 'textfield',
        '#required' => TRUE,
    );
//    form_set_error('time', t('An event may not end before it starts.'));
}

// function lsf_subscription_form_custom_request_node_form_alter(&$form, $form_state, $form_id)
// {
    // drupal_set_message('The form is being submitted, do some extra stuff now...');  
    // if($form_id == 'custom_request_node_form')
    // {
        // $form['#submit'][] = "lsf_subscription_form_submit_handler";
    // }
// }

// function lsf_subscription_form_submit_handler($form, &$form_state)
// {
    // drupal_set_message('The form is being submitted, do some extra stuff now...');
// }



// Implements hook_node_submit
//
// Function to insert new user AOI when created
function lsf_subscription_node_submit($node, $form, &$form_state) {
    // This hook is invoked when a node form is submitted with either the "Save" or "Preview" button,
    // after form values have been copied to the form state's node object, but before the node is saved or previewed.
    if ($node->type === 'subscription') {
        $select_type = '';
        if (isset($node->field_area_type)) {
            $select_type = $node->field_area_type['und'][0]['value'];
            switch ($select_type) {
                case 'select_county':
                    insert_subscription_aoi_by_county($node, $form_state);
                    break;
                case 'upload_shapefile':
                    insert_subscription_aoi_by_shape($node, $form, $form_state);
                    break;
                case 'draw_area':
                    insert_subscription_aoi_by_map($node, $form_state);
                    break;
            }
        }
    }

    if ($node->type === 'custom_request') {
        $select_type = '';
        if (isset($node->field_area_type)) {
            $select_type = $node->field_area_type['und'][0]['value'];
            switch ($select_type) {
                case 'select_county':
                    // dsm($form);
                    insert_custom_req_aoi_by_county($node, $form_state);
                    break;
                case 'upload_shapefile':
                    insert_custom_req_aoi_by_shape($node, $form, $form_state);
                    break;
                case 'draw_area':
                    insert_custom_req_aoi_by_map($node, $form_state);
                    break;
            }
        }
    }
}

function insert_custom_req_aoi_by_county($node, $form_state) {
    global $database, $lsf_database;
    $fields = array();
    $county_geoid = '';
    foreach ($form_state['values'] as $key=>$value) {
        $fields[$key] = $value;
        if (strpos($key,'counties') !== false) {
            $county_geoid = $fields[$key]['und'][0]['value'];
        }
    }

    // Two date fields:
    $date1 = preg_split('/\s+/', $form_state['values']['field_select_dates']['und'][0]['value'])[0];
    $date2 = preg_split('/\s+/', $form_state['values']['field_select_dates']['und'][0]['value2'])[0];
    dpm($date1);
    dpm($date2);

    // Switch to the lsf db
    Database::addConnectionInfo($database, 'default', $lsf_database);
    db_set_active($database);

    // Get list of quad_ids by county geoid
    $quad_ids = array();
    try {
        $result = db_select('quad_counties', 'qc')
            ->fields('qc', array('quad_id'))
            ->condition('geoid', $county_geoid,'=')
            ->execute();
    }
    catch (Exception $e) {
        drupal_set_message('Exception: ' . $e);
    }

    foreach ($result as $record) {
        $quad_ids[] = $record;
    }
    dsm($quad_ids);

    // For each quad_id's path row get list of scene_ids from landsat_metadata:
    $landsat_metadata = array();
    $scene_ids = array();
    foreach ($quad_ids as $key => $value) {
        // drupal_set_message($value->quad_id);
        try {
            $wrs2_path = substr((string)$value->quad_id,1,2);
            drupal_set_message($wrs2_path);
            $wrs2_row = substr((string)$value->quad_id,4,2);
            drupal_set_message($wrs2_row);
            // SELECT * FROM get_scene_ids_from_path_row('2015-06-01','2015-06-30',18,35);
            $result = db_query("SELECT * FROM get_scene_ids_from_path_row('".(string)$date1."','".(string)$date2."','".$wrs2_path."','".$wrs2_row."')");
            // foreach ($result as $record) {
            //     $day = substr((string)$record->scene_id,13,3);
            //     $sensor = substr((string)$value->scene_id,0,3);
            //     drupal_set_message($day);
            //     drupal_set_message($sensor);
            //     $landsat_metadata[] = $record;
            //     if (!in_array($record->scene_id,$scene_ids) {
            //         $scene_ids[] = $record->scene_id;
            //     }
            // }
        }
        catch (Exception $e) {
            drupal_set_message('Exception: ' . $e);
        }
    }

    // dsm($scene_ids);
    // dsm($landsat_metadata);
    // Be sure to set the db back to the default one
    db_set_active();
}

function insert_subscription_aoi_by_county($node, $form_state) {
    global $database, $lsf_database;
    $fields = array();
    $county_geoid = '';
    foreach ($form_state['values'] as $key=>$value) {
        $fields[$key] = $value;
        if (strpos($key,'counties') !== false) {
            $county_geoid = $fields[$key]['und'][0]['value'];
        }
    }	

    // Switch to the lsf db
    Database::addConnectionInfo($database, 'default', $lsf_database);
    db_set_active($database);	

    // Get list of quad_ids by county geoid
    $quad_ids = array();
    try {
        $result = db_select('quad_counties', 'qc')
            ->fields('qc', array('quad_id'))
            ->condition('geoid', $county_geoid,'=')
            ->execute();	
    }
    catch (Exception $e) {
        drupal_set_message('Exception: ' . $e);
    }
    foreach ($result as $record) {
        $quad_ids[] = $record;
    }		
    // dsm($quad_ids);

    // Get county bbox
    // e.g. select ST_AsText(ST_Envelope(geom)) As bbox from counties where geoid=12035;
    $county_bbox = array();
    try {
        $result = db_query('SELECT ST_AsText(ST_Envelope(geom)) AS bbox 
            FROM counties WHERE geoid = :geoid', array(':geoid' => $county_geoid));			
    }
    catch (Exception $e) {
        drupal_set_message('Exception: ' . $e);
    }
    foreach ($result as $record) {
        $county_bbox[] = $record;
    }

    // For each quad_id insert into user_aoi:
    foreach ($quad_ids as $key => $value) {
        // drupal_set_message($value->quad_id);
        try {
            db_insert('user_aoi')
                ->fields(array(
                    'user_id' => $node->name,
                    'quad_id' => $value->quad_id,
                    'aoi_name' => $node->title,
                    'aoi_type' => $node->type,
                    'bbox' => $county_bbox[0]->bbox,
                ))->execute();
        }
        catch (Exception $e) {
            drupal_set_message('Exception: ' . $e);
        }
    }

    // Be sure to set the db back to the default one
    db_set_active();
}

function insert_subscription_aoi_by_shape($node, $form, &$form_state) {
    global $database, $lsf_database, $shapeGeoJSON;
    $zipFileName = file_load($node->field_area_shapefile['und']['0']['fid'])->filename;
    $command = '/usr/bin/python ' .  drupal_get_path('module', 'lsf_subscription') . '/cgi-bin/shp2wkt.cgi sites/default/files/shapefiles/'.$zipFileName;
    $shapeFileResults = shell_exec($command);
    $shapeFileResultsArray = explode(':', $shapeFileResults);
    $shapeFileName = $shapeFileResultsArray[0];
    $bboxArray = explode(',', $shapeFileResultsArray[1]);
    $shapeBBOXWKT = 'POLYGON(('.$bboxArray[0].' '.$bboxArray[2].','.$bboxArray[0].' '.$bboxArray[3].','.$bboxArray[1].' '.$bboxArray[3].','.$bboxArray[1].' '.$bboxArray[2].','.$bboxArray[0].' '.$bboxArray[2].'))';

    // Switch to the lsf db
    Database::addConnectionInfo($database, 'default', $lsf_database);
    db_set_active($database);

    // Get list of quad_ids by spatial intersection to the shapeBBOXWKT
    $quad_ids = array();
    try {
        $result = db_query("SELECT get_quad_ids_from_wkt FROM get_quad_ids_from_wkt('".$shapeBBOXWKT."')");
    }
    catch (Exception $e) {
        drupal_set_message('Exception: ' . $e);
    }

    foreach ($result as $record) {
        $quad_ids[] = $record;
    }
    // dsm($quad_ids);

    // For each quad_id insert into user_aoi:
    foreach ($quad_ids as $key => $value) {
        // drupal_set_message($value->quad_id);
        try {
            db_insert('user_aoi')
                ->fields(array(
                    'user_id' => $node->name,
                    'quad_id' => $value->get_quad_ids_from_wkt,
                    'aoi_name' => $node->title,
                    'aoi_type' => $node->type,
                    'bbox' => $shapeBBOXWKT,
                ))->execute();
        }
        catch (Exception $e) {
            drupal_set_message('Exception: ' . $e);
        }
    }

    // Be sure to set the db back to the default one
    db_set_active();
}	

function lsf_subscription_file_insert($file) {
    global $shapeGeoJSON;
    // dsm($file);
    $zipFileName = $file->uri;
    $tmpExplode = explode('/', $zipFileName);
    $zipFileName = end($tmpExplode);
    // drupal_set_message($zipFileName);
    // Populate field_area_geojson
    $command =  '/usr/bin/python ' .  drupal_get_path('module', 'lsf_subscription') . '/cgi-bin/shp2json.cgi sites/default/files/shapefiles/'.$zipFileName;
    // drupal_set_message($command);
    // dsm($command);
    $shapeGeoJSON = shell_exec($command);
    // drupal_set_message($shapeGeoJSON);
    // dsm($shapeGeoJSON);
    drupal_add_js(array('lsf_subscription' => array('geojson' => $shapeGeoJSON)), 'setting');
    drupal_add_js(drupal_get_path('module', 'lsf_subscription') .'/populate_geojson.js');
}

function insert_subscription_aoi_by_map($node, $form_state) {

}
