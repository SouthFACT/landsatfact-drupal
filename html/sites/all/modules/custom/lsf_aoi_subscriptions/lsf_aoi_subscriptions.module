<?php

/**
 * Implements hook menu
 */
function lsf_aoi_subscriptions_menu() {
    // adds ajax endpoint to set up aoi subscriptions
    $items['aoisub/ajax'] = array(
        'title' => 'AOI SUBSCRIPTION CALLBACK ENDPOINT',
        'type' => MENU_CALLBACK,
        'page callback' => '_lsf_aoi_subscription_handler',
        'access callback' => TRUE,
    );

    return $items;
}

/**
 * Implements hook_node_view
 *
 * Adds js files for aoi subscriptions. Adds nid to page javascript.
 */
function lsf_aoi_subscriptions_node_view($node, $view_mode, $langcode) {
    if ($node->type === 'aoi' && $view_mode === 'full') {
        global $user;

        $aoi_vars = array('aoi_subscription' => array(
            'nid' => $node->nid,
            'subscribed' => _check_if_user_is_subscribed($user->uid, $node->nid),
        ));
        $node->content['#attached']['js'][] = array(
            'data' => $aoi_vars,
            'type' => 'setting',
        );

        $path = drupal_get_path('module', 'lsf_aoi_subscriptions') . '/aoi_subscription_button.js';
        $node->content['#attached']['js'][] = $path;
    }
}

/**
 * General purpose handler for managing subscriptions to AOI's
 */
function _lsf_aoi_subscription_handler() {
    if ($_REQUEST['type'] === 'subscription_add') {
        $result = _handle_user_subscribe($_POST['nid']);
    }

    drupal_json_output($result);
    exit();
}

function _handle_user_subscribe ($nid) {
    global $user;

    $uid = $user->uid;

    if (_check_if_user_is_subscribed($uid, $nid) === FALSE) {
        return _create_aoi_subscription_node($uid, $nid);
    } else {
        return _unsubscribe_user_from_aoi($uid, $nid);
    }
}

function _check_if_user_is_subscribed ($uid, $nid) {
    $result = db_query('SELECT COUNT(*) FROM field_data_field_parent_aoi AS aoi LEFT JOIN node ON aoi.entity_id=node.nid WHERE aoi.bundle=\'aoi_subscription\' AND node.uid = :uid AND aoi.field_parent_aoi_target_id = :nid', array(':uid' => $uid, ':nid' => $nid));
    return (intval($result->fetchAssoc()['COUNT(*)']) > 0);
}

function _unsubscribe_user_from_aoi ($uid, $nid) {
    $subscription_nid = _get_subscription_nid($uid, $nid);
    node_delete($subscription_nid);
    return 'unsubscribed';
}

function _get_subscription_nid ($uid, $nid) {
    $result = db_query('SELECT aoi.entity_id FROM field_data_field_parent_aoi AS aoi LEFT JOIN node ON aoi.entity_id=node.nid WHERE aoi.bundle=\'aoi_subscription\' AND node.uid = :uid AND aoi.field_parent_aoi_target_id = :nid', array(':uid' => $uid, ':nid' => $nid));
    return $result->fetchAssoc()['entity_id'];
}

function _create_aoi_subscription_node ($uid, $nid) {
    $values = array(
        'type' => 'aoi_subscription',
        'uid' => $uid,
        'status' => 1,
        'comment' => 0,
        'promote' => 0,
    );
    $entity = entity_create('node', $values);

    // The entity is now created, but we have not yet simplified use of it.
    // Now create an entity_metadata_wrapper around the new node entity
    // to make getting and setting values easier
    $ewrapper = entity_metadata_wrapper('node', $entity);

    $ewrapper->title->set('AOI subscription for user');

    // Set the value of the entity reference field
    // Note that the entity id must be passed as an integer not a string
    $entity->field_parent_aoi[LANGUAGE_NONE][] = array(
        'target_id' => intval($nid),
        'target_type' => 'node',
    );

    // Now just save the wrapper and the entity
    // There is some suggestion that the 'true' argument is necessary to
    // the entity save method to circumvent a bug in Entity API. If there is
    // such a bug, it almost certainly will get fixed, so make sure to check.
    $ewrapper->save();

    return 'success';
}
