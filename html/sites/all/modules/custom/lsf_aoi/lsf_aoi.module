<?php

include(drupal_get_path('module', 'lsf_aoi') . '/db_helpers.php');
include(drupal_get_path('module', 'lsf_aoi') . '/helpers.php');


// This function sets up the connection to the LSF database using the config file
// that is tracked outside of git.
function _lsf_aoi_set_database_connection() {
	$config_info = parse_ini_file(DRUPAL_ROOT . '/../lsf_config.ini', true);
	$username = $config_info['pgsql_connection']['username'];
	$password = $config_info['pgsql_connection']['password'];
	$host = $config_info['pgsql_connection']['host'];
	$port = $config_info['pgsql_connection']['port'];
	$driver = $config_info['pgsql_connection']['driver'];
	$database = $config_info['pgsql_connection']['database'];
	$lsf_database = array(
		'database' => $database,
		'username' => $username,
		'password' => $password,
		'host' => $host,
		'port' => $port,
		'driver' => $driver,
	);

	Database::addConnectionInfo($database, 'default', $lsf_database);
	db_set_active($database);
}

/**
 * Implements hook_views_post_execute
 */
function lsf_aoi_views_post_execute(&$view) {
	if ($view->name === 'user_aoi_listing') {
		_lsf_aoi_remove_duplicate_user_aois_from_view($view->result);
	} elseif ($view->name === 'public_aoi_listing') {
		_lsf_aoi_remove_duplicate_public_aois_from_view($view->result);
	} elseif ($view->name === 'aoi_notification_table') {
		$aoi_vars = array('aoi_events' => array());
		for ($i=0; $i<count($view->result); $i++) {
				$nid = _get_nid_from_view_result($view->result[$i]);
				$url = _lsf_aoi_build_node_url_alias_by_nid($nid);
				$date_detected = _lsf_aoi_get_aoi_event_date_detected_by_nid($nid);
				if (!$nid) {
						continue;
				}
				$aoi_vars['aoi_events'][$i] = array(
						'nid' => $nid,
						'url' => $url,
						'date_detected' => $date_detected,
				);
		}
		drupal_add_js($aoi_vars, 'setting');
	}
}


/**
 * Removes duplicate aois from listing of a users subscriptions. View filtering not
 * letting me do this through the UI. Assumes the results have been sorted so the
 * first result for a node has the most recent date.
 */
function _lsf_aoi_remove_duplicate_user_aois_from_view(&$results) {
		$distinct_aoi_nids = [];
		$l = sizeof($results);
		for ($i = 0; $i < $l; $i++) {
			$parent_nid = $results[$i]->node_field_data_field_parent_aoi_nid;
			if (in_array($parent_nid, $distinct_aoi_nids) === TRUE) {
				unset($results[$i]);
			} else {
				array_push($distinct_aoi_nids, $parent_nid);
			}
		}
		$results = array_values($results);
}

/**
 * Removes duplicate aois from listing of the public aois. View filtering not
 * letting me do this through the UI. Assumes the results have been sorted so the
 * first result for a node has the most recent date.
 */
function _lsf_aoi_remove_duplicate_public_aois_from_view(&$results) {
	$distinct_aoi_nids = [];
	$l = sizeof($results);
	for ($i = 0; $i < $l; $i++) {
		$nid = $results[$i]->nid;
		if (in_array($nid, $distinct_aoi_nids) === TRUE) {
			unset($results[$i]);
		} else {
			array_push($distinct_aoi_nids, $nid);
		}
	}
	$results = array_values($results);
}


function lsf_aoi_block_view_alter(&$data, $block) {
    //	dpm($data);
}


/**
 * Implements hook_node_view
 *
 * Adds js files for aoi's and aoi notifications
 */
function lsf_aoi_node_view($node, $view_mode, $langcode) {
	if ($node->type === 'aoi' && $view_mode === 'full') {
		$path = drupal_get_path('module', 'lsf_aoi') . '/aoi_notification_table.js';
		$node->content['#attached']['js'][] = $path;
	} else if ($node->type === 'aoi_notification' && $view_mode === 'full') {
		$nid = $node->nid;
		$date_detected = _lsf_aoi_get_aoi_event_date_detected_by_nid($nid);
		$js_settings = array('date_detected' => $date_detected);
		drupal_add_js($js_settings, 'setting');
		$path = drupal_get_path('module', 'lsf_aoi') . '/aoi_notification.js';
		$node->content['#attached']['js'][] = $path;
	}

}

include_once 'aoi_ajax.inc';

/**
 * Implements hook menu
 */
function lsf_aoi_menu() {
    // adds ajax endpoint to poll the postgres database
    $items['aoi/ajax'] = array(
        'title' => 'AOI REQUEST CALLBACK ENDPOINT',
        'type' => MENU_CALLBACK,
        'page callback' => '_lsf_aoi_ajax',
        'access callback' => TRUE,
    );

    return $items;
}

// Implements hook_node_validate
function lsf_aoi_node_validate($node, $form, &$form_state) {
    if ($node->type === 'aoi') {
        if ($node->field_area_geojson['und'][0]['geom']===''){
            form_set_error(
                t('No Area of Interest.'),
                t('There is no Area of interest defined. Please select a valid area of interest or shapefile and try again.  Thanks!')
            );
            return;
        }

        if ($node->field_area_geojson['und'][0]['geom'] !== '') {
            $max_acres = 50000.0;

            geophp_load();
            $geom = geophp::load($node->field_area_geojson[LANGUAGE_NONE][0]['geom']);
            $geojson_writer = new GeoJSON();

            _lsf_aoi_set_database_connection();
            try {
                $result = db_query('SELECT * FROM get_acres_from_geojson(:geojson)', array(
                    ':geojson' => $geojson_writer->write($geom),
                ));
                $acres = (float) $result->fetchAssoc()['get_acres_from_geojson'];
            } catch (Exception $e) {
                drupal_set_message('Exception: ' . $e);
            }
            db_set_active();

            if ($acres > $max_acres && FALSE) {
                form_set_error(
                    t('area of interest too large'),
                    t('Your area of interest is ' . (number_format($acres, 2)) . ' acres, while the maximum size our system can process is ' . (number_format($max_acres)) . ' acres. Please select a smaller area.')
                );
                return;
            }
        }

        if (isset($node->field_area_type) && $node->field_area_type[LANGUAGE_NONE][0]['value'] === 'draw_area') {
            if ($node->field_custom_area[LANGUAGE_NONE][0]['geom'] === '') {
                form_set_error(
                    t('custom area missing value'),
                    t('Subscriptions of type "Draw Area" require a polygon to be drawn onto the "Custom Area" map.')
                );
                return;
            }
        } else if (isset($node->field_area_type) && $node->field_area_type[LANGUAGE_NONE][0]['value'] === 'select_county') {
            $state = strtolower($node->field_state[LANGUAGE_NONE][0]['value']);
            if ($state === '') {
                form_set_error(
                    t('select county missing data'),
                    t('Subscriptions of type "Select County" require both a state and county to be chosen.')
                );
                return;
            }
            $county = 'field_' . $state . '_counties';
            if (!isset($node->{$county}[LANGUAGE_NONE][0]) || !isset($node->{$county}[LANGUAGE_NONE][0]['value']) || $node->{$county}[LANGUAGE_NONE][0]['value'] === '') {
                form_set_error(
                    t('select county missing data'),
                    t('Subscriptions of type "Select County" require both a state and county to be chosen.')
                );
                return;
            }
        }
    }
}

/**
 * Implements hook_form_alter
 */
function lsf_aoi_form_alter(&$form, &$form_state, $form_id) {
		if ($form_id === 'aoi_node_form') {
				$form['actions']['submit']['#value'] = 'Submit';

				$lsf_aoi_path = drupal_get_path('module', 'lsf_aoi');
				$lsf_subscription_path = drupal_get_path('module', 'lsf_subscription');
				drupal_add_js($lsf_subscription_path . '/libs/geojsonhint.js' , array('type' => 'file', 'scope' => 'footer'));
				drupal_add_js($lsf_subscription_path . '/libs/jszip.min.js' , array('type' => 'file', 'scope' => 'footer'));
				drupal_add_js($lsf_subscription_path . '/libs/shp.min.js' , array('type' => 'file', 'scope' => 'footer'));
				if (array_key_exists('js', $form['#attached']) && is_array($form['#attached']['js'])) {
						$form['#attached']['js'][] = $lsf_aoi_path . '/aoi_node_add_handlers.js';
						$form['#attached']['js'][] = $lsf_subscription_path . '/libs/wellknown.js';
			 } else {
						$form['#attached']['js'] = array(
                            $lsf_aoi_path . '/aoi_node_add_handlers.js',
                            $lsf_subscription_path . '/libs/wellknown.js',
						);
				}
		}
}

// Implements hook_node_insert
//
// Uses function _handle_user_subscribe from the lsf_aoi_subscriptions module
//
// @param array node
function lsf_aoi_node_insert($node) {
    // new aoi type
    if ($node->type === 'aoi') {
        if ($node->field_generate_zonal_stats[LANGUAGE_NONE][0]['value'] === 1) {
            $aoi_id = _insert_aoi_in_postgres($node);
            register_shutdown_function('_aoi_post_insert_handler', $node->nid, $aoi_id);
        }
        if ($node->field_receive_email_notifcations[LANGUAGE_NONE][0]['value'] === 1) {
            register_shutdown_function('_handle_user_subscribe', $node->nid);
        }
    }
}

// Inserts aoi into the postgres table for a users subscription.
//
// @param array $node New node object that is being created
function _insert_aoi_in_postgres($node) {
		geophp_load();
		$geom = geophp::load($node->field_area_geojson[LANGUAGE_NONE][0]['geom']);
		$geojson_writer = new GeoJSON();

		_lsf_aoi_set_database_connection();

		if ($node->field_public[LANGUAGE_NONE][0]['value'] === 1) {
				$public = TRUE;
		} else {
				$public = FALSE;
		}

		try {
				$result = db_query('SELECT * FROM insert_alert_aoi(:geojson, :title, :nid, :public)',
													 array(
															 ':geojson' => $geojson_writer->write($geom),
															 ':title' => $node->title,
															 ':nid' => $node->nid,
															 ':public' => $public,
													 ));
				$aoi_id = $result->fetchAssoc()['insert_alert_aoi'];

		} catch (Exception $e) {
				drupal_set_message('Exception: ' . $e);
		}

		// Sets the db back to the default one
		db_set_active();

		return $aoi_id;
}

function _aoi_post_insert_handler($nid, $aoi_id) {
    $node = node_load($nid);
    if ($node && $aoi_id) {
        _lsf_aoi_set_database_connection();
        try {
            $result = db_query('SELECT * FROM get_acres_aoi_alert_subscription(:aoi)',
                               array(
                                   ':aoi' => $aoi_id,
                               ));
            $acres = $result->fetchAssoc()['get_acres_aoi_alert_subscription'];
        } catch (Exception $e) {
            drupal_set_message('Exception: ' . $e);
        }
        db_set_active();

        $node_wrapper = entity_metadata_wrapper('node', $node);
        $node_wrapper->field_aoi_area_acres->set($acres);
        $node_wrapper->field_aoi_id->set($aoi_id);
        $node_wrapper->save();
    }
}
