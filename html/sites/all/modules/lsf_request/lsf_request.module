<?php

// This function sets up the connection to the LSF database using the config file
// that is tracked outside of git.
function _lsf_request_set_database_connection() {
    $config_info = parse_ini_file(DRUPAL_ROOT . '/../lsf_config.ini', true);
    $username = $config_info['pgsql_connection']['username'];
    $password = $config_info['pgsql_connection']['password'];
    $host = $config_info['pgsql_connection']['host'];
    $port = $config_info['pgsql_connection']['port'];
    $driver = $config_info['pgsql_connection']['driver'];
    $database = $config_info['pgsql_connection']['database'];
    $lsf_database = array(
        'database' => $database,
        'username' => $username,
        'password' => $password,
        'host' => $host,
        'port' => $port,
        'driver' => $driver,
    );

    Database::addConnectionInfo($database, 'default', $lsf_database);
    db_set_active($database);	
}

include_once 'request_ajax.inc';

/**
 * Implements hook menu
 */
function lsf_request_menu() {
    // adds ajax endpoint to poll the postgres database
    $items['custom-request/ajax'] = array(
        'title' => 'CUSTOM REQUEST CALLBACK ENDPOINT',
        'type' => MENU_CALLBACK,
        'page callback' => '_lsf_request_ajax',
        'access callback' => TRUE,
    );

    return $items;
}

/**
 * Implements hook_form_alter
 */
function lsf_request_form_alter(&$form, &$form_state, $form_id) {
    if ($form_id === 'custom_request_node_form') {
        $lsf_request_path = drupal_get_path('module', 'lsf_request');
        if (array_key_exists('js', $form['#attached']) && is_array($form['#attached']['js'])) {
            $form['#attached']['js'][] = $lsf_request_path . '/libs/d3.v3.min.js';
            $form['#attached']['js'][] = $lsf_request_path . '/libs/wellknown.js';
            $form['#attached']['js'][] = $lsf_request_path . '/request_handlers.js';
        } else {
            $form['#attached']['js'] = array(
                $lsf_request_path . '/libs/d3.v3.min.js',
                $lsf_request_path . '/libs/wellknown.js',
                $lsf_request_path . '/request_handlers.js',
            );
        }
        $form['#attached']['css'] = array(
            $lsf_request_path . '/css/lsf_request.css',
        );
        $form['actions']['submit']['#value'] = 'Submit';
        $form['actions']['submit']['#submit'][] = '_lsf_request_remove_message';
    }
}

/**
 * Removes default status message on custom request node submit
 */
function _lsf_request_remove_message(&$form, &$form_state) {
    foreach ($_SESSION['messages']['status'] as $key => $value) {
        if (strpos($value, 'Custom Request ') === 0) {
            unset($_SESSION['messages']['status'][$key]);
        }
    }
}

// Implements hook_node_submit
//
// Handles logic needed to handle custom requests
/*
function lsf_request_node_submit($node, $form, &$form_state) {
    if ($node->type === 'custom_request') {
        $select_type = '';
        if (isset($node->field_area_type)) {
            $select_type = $node->field_area_type['und'][0]['value'];
            switch ($select_type) {
                case 'select_county':
                    // dsm($form);
                    insert_custom_req_aoi_by_county($node, $form_state);
                    break;
                case 'upload_shapefile':
                    insert_custom_req_aoi_by_shape($node, $form, $form_state);
                    break;
                case 'draw_area':
                    insert_custom_req_aoi_by_map($node, $form_state);
                    break;
            }
        }
    }
}
*/
function insert_custom_req_aoi_by_county($node, $form_state) {
    $fields = array();
    $county_geoid = '';
    foreach ($form_state['values'] as $key=>$value) {
        $fields[$key] = $value;
        if (strpos($key,'counties') !== false) {
            $county_geoid = $fields[$key]['und'][0]['value'];
        }
    }

    // Two date fields:
    $date1 = preg_split('/\s+/', $form_state['values']['field_select_dates']['und'][0]['value'])[0];
    $date2 = preg_split('/\s+/', $form_state['values']['field_select_dates']['und'][0]['value2'])[0];
    dpm($date1);
    dpm($date2);

    // Switch to the lsf db
    _lsf_request_set_database_connection();

    // Get list of quad_ids by county geoid
    $quad_ids = array();
    try {
        $result = db_select('quad_counties', 'qc')
            ->fields('qc', array('quad_id'))
            ->condition('geoid', $county_geoid,'=')
            ->execute();
    }
    catch (Exception $e) {
        drupal_set_message('Exception: ' . $e);
    }

    foreach ($result as $record) {
        $quad_ids[] = $record;
    }
    dsm($quad_ids);

    // For each quad_id's path row get list of scene_ids from landsat_metadata:
    $landsat_metadata = array();
    $scene_ids = array();
    foreach ($quad_ids as $key => $value) {
        // drupal_set_message($value->quad_id);
        try {
            $wrs2_path = substr((string)$value->quad_id,1,2);
            drupal_set_message($wrs2_path);
            $wrs2_row = substr((string)$value->quad_id,4,2);
            drupal_set_message($wrs2_row);
            // SELECT * FROM get_scene_ids_from_path_row('2015-06-01','2015-06-30',18,35);
            $result = db_query("SELECT * FROM get_scene_ids_from_path_row('".(string)$date1."','".(string)$date2."','".$wrs2_path."','".$wrs2_row."')");
            // foreach ($result as $record) {
            //     $day = substr((string)$record->scene_id,13,3);
            //     $sensor = substr((string)$value->scene_id,0,3);
            //     drupal_set_message($day);
            //     drupal_set_message($sensor);
            //     $landsat_metadata[] = $record;
            //     if (!in_array($record->scene_id,$scene_ids) {
            //         $scene_ids[] = $record->scene_id;
            //     }
            // }
        }
        catch (Exception $e) {
            drupal_set_message('Exception: ' . $e);
        }
    }

    // dsm($scene_ids);
    // dsm($landsat_metadata);
    // Be sure to set the db back to the default one
    db_set_active();
}

// Implements hook_node_insert
//
// @param array node
function lsf_request_node_insert($node) {
    if ($node->type === 'custom_request') {
        $account  = user_load($node->uid);
        geophp_load();
        $geom = geophp::load($node->field_area_geojson[LANGUAGE_NONE][0]['geom']);
        $geojson_writer = new GeoJSON();
        _lsf_request_set_database_connection();

        try {
            $result = db_query('SELECT * FROM insert_user_aoi_by_geojson(:nid, :uid, :title, :type, :geojson)',
                               array(
                                   ':nid' => $node->nid,
                                   ':uid' => $node->uid,
                                   ':title' => $node->title,
                                   ':type' => $node->type,
                                   ':geojson' => $geojson_writer->write($geom),
                               ));            

            $aoi = db_query('SELECT * FROM get_aoi_id_by_nodeid(:nid)', array (
                ':nid' => $node->nid,
            ))->fetch();

            $scene_ids = array();

            foreach ($node->field_initial_scene[LANGUAGE_NONE] as $scene) {
                $scene_ids[] = $scene['value'];
            }
            foreach ($node->field_end_scene[LANGUAGE_NONE] as $scene) {
                $scene_ids[] = $scene['value'];
            }

            db_query('SELECT * FROM initiate_custom_request(:aoi,:uid,:scenes)', array(
                ':aoi' => $aoi->get_aoi_id_by_nodeid,
                ':uid' => $account->name,
                ':scenes' => join(',', $scene_ids),
            ));
        } catch (Exception $e) {
            db_set_active();
            drupal_set_message('Exception: ' . $e);
        }
        db_set_active();
    }
}
